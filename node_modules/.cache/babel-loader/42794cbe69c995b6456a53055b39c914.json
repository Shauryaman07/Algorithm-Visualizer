{"ast":null,"code":"import { insertStep } from './helpers';\n\nconst mergeSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length === 1) return array;\n  let mid = Math.floor(array.length / 2);\n  let L = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\n  let R = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\n  let arrayNew = merge(L, R, position, arraySteps, colorSteps);\n  arraySteps.push(arraySteps[arraySteps.length - 1].slice());\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice().fill(arrayNew.length === arraySteps[0].length ? 2 : 0));\n  return arrayNew;\n};\n\nconst merge = (L, R, position, arraySteps, colorSteps) => {\n  let arrayNew = [];\n  let A = 0;\n  let B = 0;\n\n  while (L.length > 0 && R.length > 0) {\n    if (L[A] < R[B]) {\n      arrayNew.push(L.shift());\n      insertStep(arrayNew, position, arraySteps);\n    } else {\n      arrayNew.push(R.shift());\n      insertStep(arrayNew, position, arraySteps);\n    }\n\n    updateColor(position, colorSteps, arrayNew.length - 1, [], []);\n  }\n\n  if (L.length !== 0 || R.length !== 0) {\n    updateColor(position, colorSteps, arrayNew.length, L, R);\n    arrayNew = arrayNew.concat(L);\n    arrayNew = arrayNew.concat(R);\n    insertStep(arrayNew, position, arraySteps);\n  }\n\n  return arrayNew;\n};\n\nconst updateColor = (position, colorSteps, start, L, R) => {\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  let end = position + start + L.length + R.length;\n  start = start + position;\n\n  if (end === start) {\n    colorKey.fill(1, start, end + 1);\n  } else {\n    colorKey.fill(0, start, end);\n  }\n\n  colorSteps.push(colorKey);\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/shaur/OneDrive/Desktop/visualizer/Sorting-Visualizer-Complete/src/algorithms/MergeSort.js"],"names":["insertStep","mergeSort","array","position","arraySteps","colorSteps","length","mid","Math","floor","L","slice","R","arrayNew","merge","push","fill","A","B","shift","updateColor","concat","start","colorKey","end"],"mappings":"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","sourcesContent":["import { insertStep } from './helpers';\r\n\r\nconst mergeSort = (array, position, arraySteps, colorSteps) => {\r\n\tif (array.length === 1) return array;\r\n\tlet mid = Math.floor(array.length / 2);\r\n\r\n\tlet L = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\r\n\tlet R = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\r\n\r\n\tlet arrayNew = merge(L, R, position, arraySteps, colorSteps);\r\n\tarraySteps.push(arraySteps[arraySteps.length - 1].slice());\r\n\tcolorSteps.push(\r\n\t\tcolorSteps[colorSteps.length - 1]\r\n\t\t\t.slice()\r\n\t\t\t.fill(arrayNew.length === arraySteps[0].length ? 2 : 0)\r\n\t);\r\n\treturn arrayNew;\r\n};\r\n\r\nconst merge = (L, R, position, arraySteps, colorSteps) => {\r\n\tlet arrayNew = [];\r\n\tlet A = 0;\r\n\tlet B = 0;\r\n\r\n\twhile (L.length > 0 && R.length > 0) {\r\n\t\tif (L[A] < R[B]) {\r\n\t\t\tarrayNew.push(L.shift());\r\n\t\t\tinsertStep(arrayNew, position, arraySteps);\r\n\t\t} else {\r\n\t\t\tarrayNew.push(R.shift());\r\n\t\t\tinsertStep(arrayNew, position, arraySteps);\r\n\t\t}\r\n\t\tupdateColor(position, colorSteps, arrayNew.length - 1, [], []);\r\n\t}\r\n\r\n\r\n\tif (L.length !== 0 || R.length !== 0) {\r\n\t\tupdateColor(position, colorSteps, arrayNew.length, L, R);\r\n\t\tarrayNew = arrayNew.concat(L);\r\n\t\tarrayNew = arrayNew.concat(R);\r\n\t\tinsertStep(arrayNew, position, arraySteps);\r\n\t}\r\n\r\n\treturn arrayNew;\r\n};\r\n\r\nconst updateColor = (position, colorSteps, start, L, R) => {\r\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\r\n\tlet end = position + start + L.length + R.length;\r\n\tstart = start + position;\r\n\r\n\tif (end === start) {\r\n\t\tcolorKey.fill(1, start, end + 1);\r\n\t} else {\r\n\t\tcolorKey.fill(0, start, end);\r\n\t}\r\n\tcolorSteps.push(colorKey);\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}